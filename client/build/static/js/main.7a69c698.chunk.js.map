{"version":3,"sources":["modules/flightplan/creator.js","modules/flightplan/browser.js","modules/flightplan/index.js","modules/scenarioeditor/index.js","home/index.js","App.js","serviceWorker.js","index.js"],"names":["FlightPlanCreator","classes","useStyles","Grid","container","spacing","item","xs","className","root","formRow","TextField","label","textField","margin","InputLabelProps","shrink","variant","id","textFieldWide","multiline","rows","Button","color","makeStyles","theme","marginBottom","marginLeft","marginRight","width","FlightPlanBrowser","Typography","TabContent","FlightPlan","React","useState","value","setValue","sectionTitle","Tabs","onChange","event","newValue","indicatorColor","textColor","Tab","tabContent","flexGrow","textAlign","textTransform","marginTop","ScenarioEditor","Modules","SimHome","selectedIndex","setSelectedIndex","handleListItemClick","e","index","AppBar","position","appBar","Toolbar","title","md","lg","sidePanel","List","component","ListItem","button","selected","onClick","ListItemText","primary","moduleContent","grey","backgroundColor","paddingRight","padding","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a69c698.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography, TextField, Grid, Button } from '@material-ui/core'\n\n\nconst FlightPlanCreator = () => {\n    const classes = useStyles()   \n\n    return (\n        <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <div className={classes.root}>\n                    <div className={classes.formRow}>\n                        <TextField\n                        label=\"OPTIONAL FLIGHT NOTES\"                                     \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />\n                    </div>\n                    <div className={classes.formRow}>\n                        <TextField\n                        label=\"CALLSIGN\"                               \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />\n                        <TextField\n                        label=\"AIRCRAFT TYPE\"                        \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />                \n                    </div>\n                    <div className={classes.formRow}>\n                        <TextField\n                        label=\"ORIGIN AIRPORT\"                               \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />\n                        <TextField\n                        label=\"DESTINATION AIRPORT\"                               \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />  \n                        <TextField\n                        label=\"DEPARTURE/START TIME\"                        \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />               \n                    </div>\n                    <div className={classes.formRow}>\n                        <TextField\n                        label=\"CRUISING SPEED\"                               \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />\n                        <TextField\n                        label=\"CRUISING FL\"\n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />                \n                    </div>\n                    <div className={classes.formRow}>\n                        <TextField\n                        label=\"ROUTE TYPE\"                        \n                        className={classes.textField}                \n                        margin=\"normal\"\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        />  \n                        <TextField\n                        id=\"filled-full-width\"\n                        label=\"ROUTES\"\n                        className={classes.textFieldWide}\n                        InputLabelProps={{ shrink: true }}\n                        variant=\"outlined\"\n                        multiline\n                        rows={4}                        \n                        />\n                    </div>\n                    <div className={classes.textField}>\n                        <Button variant=\"contained\" color=\"primary\">CREATE</Button>\n                    </div>\n                </div> \n            </Grid>\n        </Grid>  \n    )\n}\n\nexport default FlightPlanCreator\n\n\n\n/**\n * CSS Rules\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        // display: 'flex',\n        // flexDirection: 'column',\n        // flexWrap: 'wrap',\n    },\n    formRow: {\n        marginBottom: theme.spacing(2),\n    },\n    textField: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        width: '25ch',\n    }, \n    textFieldWide: {\n        margin: theme.spacing(2),        \n        width: '75ch',\n    },   \n}))","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\n\n\nconst FlightPlanBrowser = () => {\n    const classes = useStyles()   \n\n    return (\n        <div>\n            <Typography>Browser content</Typography>\n        </div>        \n    )\n}\n\nexport default FlightPlanBrowser\n\n\n\n/**\n * CSS Rules\n */\n\nconst useStyles = makeStyles((theme) => ({\n    \n}))","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography, Tabs, Tab } from '@material-ui/core'\n\n\nimport FlightPlanCreator from './creator'\nimport FlightPlanBrowser from './browser'\n\n\nconst TabContent = [ <FlightPlanCreator />, <FlightPlanBrowser /> ]\n\nconst FlightPlan = () => {\n    const classes = useStyles()    \n    const [value, setValue] = React.useState(0);\n    const handleChange = (event, newValue) => {        \n        setValue(newValue)\n    };\n    return (\n        <div>\n            <Typography variant=\"h5\" className={classes.sectionTitle}>Flight plan</Typography>\n            <div className={classes.root}>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    indicatorColor=\"primary\"\n                    textColor=\"primary\"                    \n                    >\n                    <Tab label=\"Create\" />\n                    <Tab label=\"Browse\" />\n                </Tabs>\n            </div>\n            <div className={classes.tabContent}>\n                {TabContent[value]}\n            </div>\n        </div>\n        \n    )\n}\n\nexport default FlightPlan\n\n\n\n/**\n * CSS Rules\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    sectionTitle: {\n        textAlign: \"left\",\n        marginBottom: theme.spacing(2),\n        textTransform: \"uppercase\"\n    },\n    tabContent: {\n        marginTop: theme.spacing(5)\n    }\n}))","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Typography } from '@material-ui/core'\n\n\n\nconst ScenarioEditor = () => {\n    const classes = useStyles()\n    return (\n        <Typography variant=\"h5\">Scenario editor section</Typography>\n    )\n}\n\nexport default ScenarioEditor\n\n\n\n/**\n * CSS Rules\n */\n\nconst useStyles = makeStyles((theme) => ({\n\n}))","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { AppBar, Toolbar, Typography, Grid, List, ListItem, ListItemText } from '@material-ui/core'\nimport { grey } from '@material-ui/core/colors';\n\n\nimport FlightPlan from '../modules/flightplan/index'\nimport ScenarioEditor from '../modules/scenarioeditor/index'\n\n\nconst Modules = [\n    <FlightPlan />,\n    <ScenarioEditor />\n] \n\n\nconst SimHome = () => {\n    const classes = useStyles()\n    const [selectedIndex, setSelectedIndex] = useState(0)\n    \n    const handleListItemClick = (e, index) => {        \n        setSelectedIndex(index);\n    }  \n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" className={classes.appBar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        DATA PREPARATION - Intelligent Air Traffic Simulator (iSIM)\n                    </Typography>              \n                </Toolbar>\n            </AppBar>\n            <Grid container spacing={5}>\n                {/* Left Sidebar */}\n                <Grid item xs={4} md={3} lg={2}>\n                    <div className={classes.sidePanel}>\n                        <List component=\"nav\">\n                            <ListItem button selected={selectedIndex === 0} onClick={(e) => handleListItemClick(e, 0)}>\n                                <ListItemText primary=\"Flight Plan\" />\n                            </ListItem>\n                            <ListItem button selected={selectedIndex === 1} onClick={(e) => handleListItemClick(e, 1)}>\n                                <ListItemText primary=\"Scenario Editor\" />\n                            </ListItem>\n                        </List>                        \n                    </div>\n                </Grid>\n                \n                {/* Main content */}\n                <Grid item xs={8} md={9} lg={10}>\n                    <div className={classes.moduleContent}>\n                        {Modules[selectedIndex]}\n                    </div>                    \n                </Grid>                \n            </Grid>\n        </div>\n      );    \n}\n\nexport default SimHome\n\n\n/**\n * CSS Rules\n */\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        // flexGrow: 1,\n        color: grey[800]\n    },\n    appBar : {\n        backgroundColor: grey[800],\n    },\n    title: {\n        flexGrow: 1,\n    },\n    sidePanel : {\n        paddingRight: 50,\n    },\n    moduleContent : {\n        padding: 10,\n        textAlign: \"auto\"        \n    }\n}))","import React from 'react';\nimport './App.css';\n\nimport SimHome from './home/index'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SimHome />\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}